services:
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    environment:
      SA_PASSWORD: "Your_password123"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - sqlvolume:/var/opt/mssql
    networks:
      - devnetwork
    restart: unless-stopped
    healthcheck:
      test: [
        "CMD-SHELL",
        "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Your_password123 -N -C -Q \"SELECT 1\""
      ]
      interval: 10s
      timeout: 5s
      retries: 10
    
  rabbitmq:
    image: rabbitmq:3-management # Розгляньте можливість використання більш конкретного тегу, наприклад, rabbitmq:3.12-management
    container_name: rabbitmq
    hostname: rabbitmq
    # tty: true # Зазвичай не потрібен для RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      # RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbitmq_stream advertised_host localhost # Якщо потрібно для stream plugin
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s 
      timeout: 10s
      retries: 5
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
      - "5552:5552"    # Якщо використовується Stream plugin (якщо ні, цей порт можна прибрати)
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq 
    networks:
      - devnetwork
    restart: unless-stopped

  mongo:
    image: mongo:latest # Розгляньте можливість використання більш конкретного тегу, наприклад, mongo:7.0
    restart: always
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root 
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db 
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    networks:
      - devnetwork
    
  sessionmvc:
    # Jenkins буде збирати образ з тегом, наприклад, sessionmvc-app:${env.BUILD_NUMBER}.
    # Щоб docker-compose використовував цей образ, Jenkins може тегувати його як 'sessionmvc:latest'
    # або ви можете параметризувати назву образу тут.
    # Для простоти, якщо Jenkins збирає 'sessionmvc:latest', compose його підхопить.
    image: sessionmvc # Або ${DOCKER_REGISTRY-}sessionmvc, якщо ви використовуєте змінну DOCKER_REGISTRY
    build:
      context: .
      dockerfile: SessionMVC/Dockerfile # Правильний шлях до вашого Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      # Ваш Program.cs вже налаштовує Kestrel слухати на кількох портах, включаючи 8080.
      # Тому ASPNETCORE_HTTP_PORTS або ASPNETCORE_URLS тут можуть бути необов'язковими,
      # якщо конфігурація в Program.cs достатня.
      # - ASPNETCORE_HTTP_PORTS=8080 # Можна додати для більшої явності, якщо потрібно
      - ConnectionStrings__AssessmentDbConnectionString=Server=db;Database=Assessment;User=sa;Password=Your_password123;Encrypt=False;TrustServerCertificate=True
      - MongoConnectionString=mongodb://mongo:27017/YourActualMongoDbName?directConnection=true # ЗАМІНІТЬ YourActualMongoDbName
    ports:
      - "8081:8080" # УЗГОДЖЕНО: порт 8080 контейнера (де слухає ваш додаток) на порт 8081 хоста
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - devnetwork
    restart: unless-stopped

volumes:
  sqlvolume:
  rabbitmq_data:
  mongo_data:
    
networks:
  devnetwork:
    driver: bridge
