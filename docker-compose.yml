services:
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    environment:
      SA_PASSWORD: "Your_password123"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - sqlvolume:/var/opt/mssql
    networks:
      - devnetwork
    restart: unless-stopped
    healthcheck:
      test: [
        "CMD-SHELL",
        "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Your_password123 -N -C -Q \"SELECT 1\""
      ]
      interval: 10s
      timeout: 5s
      retries: 10
    
  rabbitmq:
    image: rabbitmq:3-management # Рекомендую використовувати більш конкретний тег, ніж просто :management
    container_name: rabbitmq
    tty: true # tty зазвичай не потрібен для rabbitmq, якщо не взаємодієте інтерактивно
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      # RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbitmq_stream advertised_host localhost # Цей параметр може бути специфічним для stream plugin, перевірте необхідність
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s # Інтервали healthcheck можуть бути довшими
      timeout: 15s
      retries: 3
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672" # Management UI
      # - "5552:5552" # Якщо це для stream plugin, залиште
    volumes: # Рекомендується додати volume для збереження даних RabbitMQ
      - rabbitmq_data:/var/lib/rabbitmq 
    networks:
      - devnetwork
    restart: unless-stopped

  mongo:
    image: mongo:latest # Рекомендую використовувати більш конкретний тег, наприклад, mongo:7.0
    restart: always
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      # Ці змінні зазвичай для mongo-express, а не для самого mongo.
      # Для mongo користувачі та паролі налаштовуються через MONGO_INITDB_ROOT_USERNAME/PASSWORD
      MONGO_INITDB_ROOT_USERNAME: root 
      MONGO_INITDB_ROOT_PASSWORD: example
      # ME_CONFIG_BASICAUTH: false # Це для mongo-express
      # ME_CONFIG_MONGODB_URL: mongodb://127.0.0.1:27017/27017?directConnection=true # Це для mongo-express
    volumes: # Рекомендується додати volume для збереження даних Mongo
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    networks:
      - devnetwork
    
  sessionmvc:
    image: ${DOCKER_REGISTRY-}sessionmvc # Jenkins буде збирати це як sessionmvc:latest або sessionmvc:<build_number>
    build:
      context: .
      dockerfile: SessionMVC/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__AssessmentDbConnectionString=Server=db;Database=Assessment;User=sa;Password=Your_password123;Encrypt=False;TrustServerCertificate=True # Змінено Encrypt на False для спрощення локальної розробки без SSL з SQL Server
      - MongoConnectionString=mongodb://mongo:27017/ # Використовуємо ім'я сервісу 'mongo'
    ports:
      - "8081:8080" # ЗМІНЕНО: Прокидаємо порт 8080 контейнера на порт 8081 хоста
    depends_on:
      db:
        condition: service_healthy
        # restart: true # restart тут зазвичай не потрібен, docker-compose керує перезапуском сервісу
      rabbitmq:
        condition: service_healthy
        # restart: true
      mongo:
        condition: service_healthy
        # restart: true
    networks:
      - devnetwork
    restart: unless-stopped

volumes:
  sqlvolume:
  rabbitmq_data: # Додано volume для RabbitMQ
  mongo_data:    # Додано volume для Mongo
    
networks:
  devnetwork:
    driver: bridge
